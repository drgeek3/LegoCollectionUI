@page "/locations"
@using Microsoft.AspNetCore.Authorization
@inject LocationClient Location
@attribute [StreamRendering]
@rendermode InteractiveServer

<PageTitle>Brick Locations</PageTitle>

<div class="w-100">
    <b>Search Location Id</b>
    <SearchBox OnSearch="UpdateFilteredLocations"></SearchBox>
</div>

<div class="mt-2 mb-2">
    <a class="btn btn-primary" role="button" href="/editLocation">Add Location</a>
</div>

@if (locations is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table table-striped table-bordered table-hover">
        <thead class="table-dark">
            <tr>
                <th>Location Id</th>
                <th>Container</th>
                <th>Unit</th>
                <th>Unit Row</th>
                <th>Drawer</th>
                <th>Overloaded</th>
                <th>Underfilled</th>
                <th>Empty</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var location in locations)
            {
                <tr>
                    <td>@location.LocationId</td>
                    <td>@location.Container</td>
                    <td>@location.Unit</td>
                    <td>@location.UnitRow</td>
                    <td>@location.Drawer</td>
                    <td>@if (@location.Overloaded)
                        {
                            <i class="bi bi-check-square-fill"></i>
                        } 
                    </td>
                    <td>@if(@location.Underfilled)
                        {
                            <i class="bi bi-check-square-fill"></i>
                        }
                    </td>
                    <td>@if (@location.LocationEmpty)
                        {
                            <i class="bi bi-check-square-fill"></i>
                        }
                    </td>
                    <td>
                        <div class="d-flex">
                            <a class="btn btn-primary me-2" role="button" href="@LocationUrl(location.Id)">
                                <i class="bi bi-pencil"></i>
                            </a>
                            <button class="btn btn-danger" data-bs-toggle="modal" data-bs-target="@GetDeleteModalId(location)">
                                <i class="bi bi-x-lg"></i>
                            </button>
                        </div>
                        <DeleteLocation Location="@location" />
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {

    private LocationModel[]? locations;

    protected override async Task OnInitializedAsync()
    {
        locations = await Location.GetLocationsAsync();
    }

    private static string LocationUrl(int id) => $"/editlocation/{id}";

    private string GetDeleteModalId(LocationModel location)
    {
        return $"#{DeleteLocation.GetModalId(location)}";
    }

    private async Task UpdateFilteredLocations(string searchTerm)
    {
        if (string.IsNullOrEmpty(searchTerm))
        {
            locations = await Location.GetLocationsAsync();
        }
        else
        {
            locations = await Location.GetLocationIdAsync(searchTerm);
        }
    }
}