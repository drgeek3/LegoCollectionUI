@page "/editbrick"
@page "/editbrick/{Id:int}"

@rendermode InteractiveServer

@inject NavigationManager NavigationManager
@inject BricksClient Client

<PageTitle>@title</PageTitle>

<h3>@title</h3>

@if (brick is null)
{
	<p><em>Loading...</em></p>
}
else
{
	<div class="row">
		<div class="col-md-4">
			<EditForm Model="@brick" FormName="editbrick" OnValidSubmit="HandleSubmitAsync" Enhance>
				<DataAnnotationsValidator />
				<ValidationSummary />
 				<div class="mb-3">
					<label for="brickId" class="form-label">Brick Id:</label>
					<InputText id="brickId" @bind-Value="brick.BrickId" class="form-control" />
					<ValidationMessage For="() => brick.BrickId" />
				</div> 
				<div class="mb-3">
					<label for="description" class="form-label">Description:</label>
					<InputText id="description" @bind-Value="brick.Description" class="form-control" />
					<ValidationMessage For="() => brick.Description" />
				</div>
				<div class="mb-3">
					<label for="category" class="form-label">Category:</label>
					<InputText id="category" @bind-Value="brick.Category" class="form-control" />
					<ValidationMessage For="() => brick.Category" />
				</div>
				<div class="mb-3">
					<label for="subcategory" class="form-label">Subcategory:</label>
					<InputText id="subcategory" @bind-Value="brick.Subcategory" class="form-control" />
					<ValidationMessage For="() => brick.Subcategory" />
				</div>
				<div class="mb-3">
					<label for="altbrickid" class="form-label">AltBrickId:</label>
					<InputText id="altbrickid" @bind-Value="brick.AltBrickId" class="form-control" />
				</div>
				<button type="submit" class="btn btn-primary">Save</button>
				<a role="button" class="btn btn-secondary" href="/locations">Cancel</a>
			</EditForm>
		</div>
	</div>
}

@code {
	[Parameter]
	public int? Id { get; set; }

	[SupplyParameterFromForm]
	private BricksModel? brick { get; set; }

	private string title = string.Empty;

	protected override async Task OnParametersSetAsync()
	{
		if (brick is not null)
		{
			return;
		}

		if (Id is not null)
		{
			brick = await Client.GetBricksAsync(Id.Value);
			title = $"Edit {brick.BrickId}";
		}
		else
		{
			brick = new()
				{
					BrickId = string.Empty,
					Description = string.Empty,
					Category = string.Empty,
					Subcategory = string.Empty,
					AltBrickId = string.Empty,
				};
			title = "New Brick";
		}
	}

	private async Task HandleSubmitAsync()
	{
		ArgumentNullException.ThrowIfNull(brick);
		if (Id is null)
		{
			await Client.AddBricksAsync(brick);
		}
		else
		{
			brick.Id = Id.Value;
			await Client.UpdateBricksAsync(brick);
		}

		NavigationManager.NavigateTo("/bricks");
	}
}
