@page "/bricks"
@using Microsoft.AspNetCore.Authorization
@inject BricksClient bricksClient
@attribute [StreamRendering]
@rendermode InteractiveServer

<PageTitle>Bricks</PageTitle>

<div class="w-100">
    <b>Search Brick Id</b>
    <SearchBox OnSearch="UpdateFilteredBricks"></SearchBox>
</div>

<div class="mt-2 mb-2">
    <a class="btn btn-primary" role="button" href="/editbrick">Add Brick</a>
</div>

@if (bricks is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table table-striped table-bordered table-hover">
        <thead class="table-dark">
            <tr>
                <th>Image</th>
                <th>Brick Id</th>
                <th>Description</th>
                <th>Category</th>
                <th>Subcategory</th>
                <th>Alt Brick Id</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var brick in bricks)
            {
                <tr>
                    <td><img src="@brick.ImageLoc" alt=""/></td>
                    <td>@brick.BrickId</td>
                    <td>@brick.Description</td>
                    <td>@brick.Category</td>
                    <td>@brick.Subcategory</td>
                    <td>@brick.AltBrickId</td>
                    <td>
                        <div class="d-flex">
                            <a class="btn btn-primary me-2" role="button" href="@BricksUrl(brick.Id)">
                                <i class="bi bi-pencil"></i>
                            </a>
                            <button class="btn btn-danger" data-bs-toggle="modal" data-bs-target="@GetDeleteModalId(brick)">
                                <i class="bi bi-x-lg"></i>
                            </button>
                        </div>
                        <DeleteBrick Bricks="@brick" />
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {

    private BricksModel[]? bricks;

    protected override async Task OnInitializedAsync()
    {
        bricks = await bricksClient.GetBricksAsync();

        foreach (var brick in bricks)
        {
            brick.ImageLoc = "/images/M" + brick.BrickId + ".png";
        }
    }

    private static string BricksUrl(int id) => $"/editbrick/{id}";

    private string GetDeleteModalId(BricksModel brick)
    {
        return $"#{DeleteBrick.GetModalId(brick)}";
    }

    private async Task UpdateFilteredBricks(string searchTerm)
    {
        if (string.IsNullOrEmpty(searchTerm))
        {
            bricks = await bricksClient.GetBricksAsync();
        }
        else
        {
            bricks = await bricksClient.GetBrickIdAsync(searchTerm);
        }

        foreach (var brick in bricks)
        {
            brick.ImageLoc = "/images/M" + brick.BrickId + ".png";
        }
    }
}